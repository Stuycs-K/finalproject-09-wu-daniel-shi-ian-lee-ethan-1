from util import *
from sha256 import *

assert string_to_binary('hello') == '0110100001100101011011000110110001101111'
assert string_to_binary('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

assert integer_to_binary(4) == '100'
assert integer_to_binary(4, 3) == '100'
assert integer_to_binary(4, 4) == '0100'
assert integer_to_binary(192) == '11000000'
assert integer_to_binary(192, 9) == '011000000'
assert integer_to_binary(512) == '1000000000'
assert integer_to_binary(512, 5) == '00000'

assert get_next_multiple_of_512(0) == 512
assert get_next_multiple_of_512(1) == 512
assert get_next_multiple_of_512(512) == 512
assert get_next_multiple_of_512(513) == 1024
assert get_next_multiple_of_512(723) == 1024
assert get_next_multiple_of_512(1024) == 1024
assert get_next_multiple_of_512(1467) == 1536

assert preprocessing('abcde') == '01100001011000100110001101100100011001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000'

assert rightrotate(string_to_binary('hello'),5)=='0111101101000011001010110110001101100011'
assert rightshift(string_to_binary('hello'),5)=='0000001101000011001010110110001101100011'

assert get_512_bit_chunks('0' * 512) == ['0' * 512]
assert get_512_bit_chunks('1' * 512 + '0' * 512) == ['1' * 512, '0' * 512]
assert get_512_bit_chunks('00110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011011' + '00110001100011000110001100011000110001100011000110001100011000110001100011000110001000011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100010000110001100011000110001100011000110001100011000110001100011000110101100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000010001100011000110001100011000110001100011000110001100011000110001110011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011011') == ['00110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011011', '00110001100011000110001100011000110001100011000110001100011000110001100011000110001000011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100010000110001100011000110001100011000110001100011000110001100011000110101100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000010001100011000110001100011000110001100011000110001100011000110001110011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011011']


assert tXor(string_to_binary('hello'),string_to_binary('hello'))=='0000000000000000000000000000000000000000'
assert bitAdd("11001110001000001011010001111110","00111010011011111110011001100111")=="00001000100100001001101011100101"

assert rightshift(string_to_binary("h"), 3) == '00001101'
assert rightrotate('01101111001000000111011101101111', 7) == '11011110110111100100000011101110'
assert s0('01101111001000000111011101101111') == '11001110111000011001010111001011'
assert preprocessing("hello")=="01101000011001010110110001101100011011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000"

#CONFIRMED bitAdd,tXor, and tAnd all work success!!!!
assert(bitAdd('11001110001000001011010001111110','00111010011011111110011001100111'))=='00001000100100001001101011100101'
#print(tXor(tXor('11011010100000100111100110011001','00110011001110110101000001001111'),'00100111100110011001110110101000'))
#print(tXor('11111101010001000011100101001001','01001111111010100010000111001010'))
#print(tAnd('01101010000010011110011001100111','10111011011001111010111010000101'))


assert(preprocessing("hello world")) =='01101000011001010110110001101100011011110010000001110111011011110111001001101100011001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000'
#w is the message schedule for hello world input
w = ['01101000011001010110110001101100','01101111001000000111011101101111',
'01110010011011000110010010000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000001011000',
'00110111010001110000001000110111','10000110110100001100000000110001',
'11010011101111010001000100001011','01111000001111110100011110000010',
'00101010100100000111110011101101','01001011001011110111110011001001',
'00110001111000011001010001011101','10001001001101100100100101100100',
'01111111011110100000011011011010','11000001011110011010100100111010',
'10111011111010001111011001010101','00001100000110101110001111100110',
'10110000111111100000110101111101','01011111011011100101010110010011',
'00000000100010011001101101010010','00000111111100011100101010010100',
'00111011010111111110010111010110','01101000011001010110001011100110',
'11001000010011100000101010011110','00000110101011111001101100100101',
'10010010111011110110010011010111','01100011111110010101111001011010',
'11100011000101100110011111010111','10000100001110111101111000010110',
'11101110111011001010100001011011','10100000010011111111001000100001',
'11111001000110001010110110111000','00010100101010001001001000011001',
'00010000100001000101001100011101','01100000100100111110000011001101',
'10000011000000110101111111101001','11010101101011100111100100111000',
'00111001001111110000010110101101','11111011010010110001101111101111',
'11101011011101011111111100101001','01101010001101101001010100110100',
'00100010111111001001110011011000','10101001011101000000110100101011',
'01100000110011110011100010000101','11000100101011001001100000111010',
'00010001010000101111110110101101','10110000101100000001110111011001',
'10011000111100001100001101101111','01110010000101111011100000011110',
'10100010110101000110011110100001101000001110011010','00000001000011111001100101111011',
'11111100000101110100111100001010','11000010110000101110101100010110']
ans=['01001111010000110100000101010010','11010111111001011000111110000011','01101000101111110101111101100101','00110101001011011011011011000000','01110011011101101001110101100100','11011111010011100001100001100010','01110001000001010001111000000001','10000111000011110000000011010000']
ans_as_ints = []
for blah in ans:
    ans_as_ints.append(int(blah, 2))

assert(sha256("abc"))=='ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'
assert(sha256("hello"))=='2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824'
assert(sha256(""))=='e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
assert(sha256("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))=='d6ec6898de87ddac6e5b3611708a7aa1c2d298293349cc1a6c299a1db7149d38'
assert(sha256("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"))=='779d5cdbabe414acd3726f3a875b925d536c9b4f80b0e29063ae527500e28ca2'
assert(sha256("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"))=='057846ed70262117c838e22a025c42d66b60bd559df98ef006d47129fd4dfd4d'
assert(sha256("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZAHPESOUTHHHHHHHAIESFASBFLJASBEIGTASIBFJADSFAHSEFUHSDFHJFHASDHFASJFEIHISISAKFASRIHGIASH4AS5D6FH789HHAHDSFKSADFJSAHDFHASFHEARIHIAKLJCNBVASIOGIUSDBKJCAIGGIOASUBDKLFHEWI")) == 'beb3344c219e2bcd93c176fa6e425a72a36abacfd9c623feb67e6ec92bd4648d'