from util import *
from sha256 import *

assert string_to_binary('hello') == '0110100001100101011011000110110001101111'
assert string_to_binary('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

assert integer_to_binary(4) == '100'
assert integer_to_binary(4), 3 == '100'
assert integer_to_binary(4), 4 == '0100'
assert integer_to_binary(192) == '11000000'
assert integer_to_binary(192), 9 == '011000000'
assert integer_to_binary(512) == '1000000000'
assert integer_to_binary(512), 5 == '00000'

assert get_next_multiple_of_512(0) == 512
assert get_next_multiple_of_512(1) == 512
assert get_next_multiple_of_512(512) == 512
assert get_next_multiple_of_512(513) == 1024
assert get_next_multiple_of_512(723) == 1024
assert get_next_multiple_of_512(1024) == 1024
assert get_next_multiple_of_512(1467) == 1536

assert preprocessing('abcde') == '01100001011000100110001101100100011001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000'

assert get_512_bit_chunks('0' * 512) == ['0' * 512]
assert get_512_bit_chunks('1' * 512 + '0' * 512) == ['1' * 512, '0' * 512]
assert get_512_bit_chunks

assert concatenate_final_hash_as_binary(h0=0x0, h1=0x0, h2=0x0, h3=0x0, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000000' * 8
assert concatenate_final_hash_as_binary(h0=0x01, h1=0x1, h2=0x1, h3=0x1, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000001' * 4 + '00000000' * 4