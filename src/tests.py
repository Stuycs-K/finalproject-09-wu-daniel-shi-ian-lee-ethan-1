from util import *
from sha256 import *

assert string_to_binary('hello') == '0110100001100101011011000110110001101111'
assert string_to_binary('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

assert integer_to_binary(4) == '100'
assert integer_to_binary(4, 3) == '100'
assert integer_to_binary(4, 4) == '0100'
assert integer_to_binary(192) == '11000000'
assert integer_to_binary(192, 9) == '011000000'
assert integer_to_binary(512) == '1000000000'
assert integer_to_binary(512, 5) == '00000'

assert get_next_multiple_of_512(0) == 512
assert get_next_multiple_of_512(1) == 512
assert get_next_multiple_of_512(512) == 512
assert get_next_multiple_of_512(513) == 1024
assert get_next_multiple_of_512(723) == 1024
assert get_next_multiple_of_512(1024) == 1024
assert get_next_multiple_of_512(1467) == 1536

assert preprocessing('abcde') == '01100001011000100110001101100100011001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000'

#0111101101000011001010110110001101100011 - expected value
#1111001101000011001010110110001101100011 - resulting value
assert rightrotate(string_to_binary('hello'),5)=='0111101101000011001010110110001101100011'
assert rightshift(string_to_binary('hello'),5)=='0000001101000011001010110110001101100011'

#print(rightshift(string_to_binary('hello'),5))
#print(rightrotate(string_to_binary('hello'),5))

assert get_512_bit_chunks('0' * 512) == ['0' * 512]
assert get_512_bit_chunks('1' * 512 + '0' * 512) == ['1' * 512, '0' * 512]
assert get_512_bit_chunks


assert tXor(string_to_binary('hello'),string_to_binary('hello'))=='0000000000000000000000000000000000000000'
assert tAnd(string_to_binary('hello'),string_to_binary('hello'))=='1111111111111111111111111111111111111111'
# sha256("hello")==b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9
#assert testSha(w)=="b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"
assert bitAdd("010","010")=="100"

assert rightshift(string_to_binary("h"), 3) == '00001101'
assert rightrotate('01101111001000000111011101101111', 7) == '11011110110111100100000011101110'
assert s0('01101111001000000111011101101111') == '11001110111000011001010111001011'
assert preprocessing("hello")=="01101000011001010110110001101100011011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000"
w = ['01101000011001010110110001101100','01101111001000000111011101101111',
'01110010011011000110010010000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000000000000',
'00000000000000000000000000000000','00000000000000000000000001011000',
'00110111010001110000001000110111','10000110110100001100000000110001',
'11010011101111010001000100001011','01111000001111110100011110000010',
'00101010100100000111110011101101','01001011001011110111110011001001',
'00110001111000011001010001011101','10001001001101100100100101100100',
'01111111011110100000011011011010','11000001011110011010100100111010',
'10111011111010001111011001010101','00001100000110101110001111100110',
'10110000111111100000110101111101','01011111011011100101010110010011',
'00000000100010011001101101010010','00000111111100011100101010010100',
'00111011010111111110010111010110','01101000011001010110001011100110',
'11001000010011100000101010011110','00000110101011111001101100100101',
'10010010111011110110010011010111','01100011111110010101111001011010',
'11100011000101100110011111010111','10000100001110111101111000010110',
'11101110111011001010100001011011','10100000010011111111001000100001',
'11111001000110001010110110111000','00010100101010001001001000011001',
'00010000100001000101001100011101','01100000100100111110000011001101',
'10000011000000110101111111101001','11010101101011100111100100111000',
'00111001001111110000010110101101','11111011010010110001101111101111',
'11101011011101011111111100101001','01101010001101101001010100110100',
'00100010111111001001110011011000','10101001011101000000110100101011',
'01100000110011110011100010000101','11000100101011001001100000111010',
'00010001010000101111110110101101','10110000101100000001110111011001',
'10011000111100001100001101101111','01110010000101111011100000011110',
'10100010110101000110011110011010','00000001000011111001100101111011',
'11111100000101110100111100001010','11000010110000101110101100010110']
print(testSha(w))
#print(message_schedule(singular_32_split(preprocessing("hello"))))
assert concatenate_final_hash_as_binary(h0=0x0, h1=0x0, h2=0x0, h3=0x0, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000000000000000000000000000000' * 8
assert concatenate_final_hash_as_binary(h0=0x01, h1=0x1, h2=0x1, h3=0x1, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000000000000000000000000000001' * 4 + '00000000000000000000000000000000' * 4

assert concatenate_final_hash_as_hex(h0=0x0, h1=0x0, h2=0x0, h3=0x0, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000000' * 8
assert concatenate_final_hash_as_hex(h0=0x1, h1=0x1, h2=0x1, h3=0x1, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000001' * 4 + '00000000' * 4
