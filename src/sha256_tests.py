from util import *
from sha256 import *

assert preprocessing('abcde') == '01100001011000100110001101100100011001011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000'

assert get_512_bit_chunks('0' * 512) == ['0' * 512]
assert get_512_bit_chunks('1' * 512 + '0' * 512) == ['1' * 512, '0' * 512]
assert get_512_bit_chunks('00110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011011' + '00110001100011000110001100011000110001100011000110001100011000110001100011000110001000011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100010000110001100011000110001100011000110001100011000110001100011000110101100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000010001100011000110001100011000110001100011000110001100011000110001110011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011011') == ['00110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011011', '00110001100011000110001100011000110001100011000110001100011000110001100011000110001000011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100010000110001100011000110001100011000110001100011000110001100011000110101100011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011000010001100011000110001100011000110001100011000110001100011000110001110011000110001100011000110001100011000110001100011000110001100011000110001100011000110001100011011']

assert s0('01101111001000000111011101101111') == '11001110111000011001010111001011'
assert preprocessing("hello")=="01101000011001010110110001101100011011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000"

assert(preprocessing("hello world")) =='01101000011001010110110001101100011011110010000001110111011011110111001001101100011001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000'

assert concatenate_final_hash_as_binary(h0=0x0, h1=0x0, h2=0x0, h3=0x0, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000000000000000000000000000000' * 8
assert concatenate_final_hash_as_binary(h0=0x01, h1=0x1, h2=0x1, h3=0x1, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000000000000000000000000000001' * 4 + '00000000000000000000000000000000' * 4

assert concatenate_final_hash_as_hex(h0=0x0, h1=0x0, h2=0x0, h3=0x0, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000000' * 8
assert concatenate_final_hash_as_hex(h0=0x1, h1=0x1, h2=0x1, h3=0x1, h4=0x0, h5=0x0, h6=0x0, h7=0x0) == '00000001' * 4 + '00000000' * 4